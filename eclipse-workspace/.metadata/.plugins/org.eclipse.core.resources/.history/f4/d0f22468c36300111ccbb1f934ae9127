package com.tagabag.activities;

import java.util.ArrayList;
import java.util.List;

import oauth.signpost.OAuth;
import oauth.signpost.commonshttp.CommonsHttpOAuthConsumer;
import oauth.signpost.commonshttp.CommonsHttpOAuthProvider;
import oauth.signpost.exception.OAuthCommunicationException;
import oauth.signpost.exception.OAuthExpectationFailedException;
import oauth.signpost.exception.OAuthMessageSignerException;
import oauth.signpost.exception.OAuthNotAuthorizedException;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.CoreProtocolPNames;
import org.apache.http.protocol.HTTP;

import com.tagabag.R;
import com.tagabag.R.id;
import com.tagabag.R.layout;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;


public class TwitterPost extends Activity {
	private static String ACCESS_KEY = null;
	private static String ACCESS_SECRET = null;
	public static String CONSUMER_KEY="mL6Arw9nmw58cKW1p9Lug";
	public static String CONSUMER_SECRET="1ECFHUG3aj4tZaSQDVzLNFRXgZWO6AoMBCtMemUt80";

	private static final String REQUEST_URL = "https://api.twitter.com/oauth/request_token";
	private static final String ACCESS_TOKEN_URL = "https://api.twitter.com/oauth/access_token";
	private static final String AUTH_URL = "https://api.twitter.com/oauth/authorize";
	private static final String CALLBACK_URL = "app://myapp";
	
	private static CommonsHttpOAuthConsumer consumer = new CommonsHttpOAuthConsumer(
				CONSUMER_KEY, CONSUMER_SECRET);
	private static CommonsHttpOAuthProvider provider = new CommonsHttpOAuthProvider(
	REQUEST_URL, ACCESS_TOKEN_URL, AUTH_URL); 

    Button btnLogin;
    

    @Override
    public void onCreate(Bundle savedInstanceState) {
    	super.onCreate(savedInstanceState);
		  setContentView(R.layout.twitter);		  
		  		  
		  btnLogin = (Button)this.findViewById(R.id.post_twit);
		  btnLogin.setOnClickListener(new View.OnClickListener() {
			  @Override
			  public void onClick(View v) {
			      try {
			          	String authURL = provider.retrieveRequestToken(
			  								consumer, CALLBACK_URL);
				  		Log.d("OAuthTwitter", "authURL: "+authURL);
				  		startActivity(new Intent(Intent.ACTION_VIEW, Uri
				  								.parse(authURL)));
			      } catch (OAuthMessageSignerException e) {
			    	  e.printStackTrace();
			      } catch (OAuthNotAuthorizedException e) {
			    	  e.printStackTrace();
			      } catch (OAuthExpectationFailedException e) {
			    	  e.printStackTrace();
			      } catch (OAuthCommunicationException e) {
			    	  e.printStackTrace();
			      }
			    }
		  });
		  		  
		  
  }

    
    
    @Override
    protected void onResume() {
    	super.onResume();
    	String verifier=getVerifier();
    	if (verifier==null)
    		return;
    	try {
    		provider.retrieveAccessToken(consumer, verifier);
    	} catch (Exception e) {
    		e.printStackTrace();
    	}
    	postStatusMessage("post cxcxt");
    	try {
    		Thread.sleep(1500);
    	} catch( Exception e) {}
    	//postStatusMessage("all good man");    
    	finish();
    }
    
    public void postStatusMessage(String status) {
        // create a request that requires authentication    	
    	HttpClient client = new DefaultHttpClient();  
        HttpPost post = new HttpPost("http://twitter.com/statuses/update.xml");
        final List<NameValuePair> nvps = new ArrayList<NameValuePair>();
        // 'status' here is the update value you collect from UI
        nvps.add(new BasicNameValuePair("status", status));
        try {
	        post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));
	        // set this to avoid 417 error (Expectation Failed)
	        post.getParams().setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, false);
	        // sign the request
	        consumer.sign(post);
	        // send the request
	        final HttpResponse response = client.execute(post);
	        // response status should be 200 OK
	        int statusCode = response.getStatusLine().getStatusCode();
	        final String reason = response.getStatusLine().getReasonPhrase();
	        // release connection
	        response.getEntity().consumeContent();
	        
	        if (statusCode != 200) {
	            Log.e("OAuthTwitter", reason);
	            throw new OAuthNotAuthorizedException();
	        }
        } catch (Exception e) {}
    }
    
    
 
    
    public String getVerifier() {
    	Uri uri = this.getIntent().getData();
    	if (uri != null)
    		Log.e("audio","uri="+uri.toString());
    	else {
    		Log.e("audio","uri==null");
    		return null;
    	}
    	
    	if (uri.toString().startsWith(CALLBACK_URL)) {
    		Log.d("audio", "uri.toString(): "+uri.toString());
    		String verifier = uri.getQueryParameter(OAuth.OAUTH_VERIFIER);
    		return verifier;
    	}
    	return null;
    }
    
    public void prepareStuff1() {
		String verifier=getVerifier();    	
		if (verifier!=null) {    		
			Log.d("audio", "verifier: "+verifier);
			try {
				provider.retrieveAccessToken(consumer, verifier);
				ACCESS_KEY = consumer.getToken();
				ACCESS_SECRET = consumer.getTokenSecret();
	
				Log.d("OAuthTwitter", "ACCESS_KEY: "+ACCESS_KEY);
				Log.d("OAuthTwitter", "ACCESS_SECRET: "+ACCESS_SECRET);
	
			} catch (OAuthMessageSignerException e) {
				e.printStackTrace();
			} catch (OAuthNotAuthorizedException e) {
				e.printStackTrace();
			} catch (OAuthExpectationFailedException e) {
				e.printStackTrace();
			} catch (OAuthCommunicationException e) {
				e.printStackTrace();
			}
		}
	}
    
 
}