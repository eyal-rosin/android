package com.tagabag.activities;

import java.util.ArrayList;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.IntentFilter.MalformedMimeTypeException;
import android.nfc.NdefMessage;
import android.nfc.NdefRecord;
import android.nfc.NfcAdapter;
import android.os.Bundle;
import android.util.Log;

public class DenyNfcDiscoveryActivity extends BaseActivity {
	static final String TAG = "ViewTag";
	private NfcAdapter mAdapter;
	private PendingIntent mPendingIntent;
	private IntentFilter[] mFilters;
	private String[][] mTechLists;
	String hexContent;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);                

		mAdapter = NfcAdapter.getDefaultAdapter(this);        
		// Create a generic PendingIntent that will be deliver to this activity. The NFC stack
		// will fill in the intent with the details of the discovered tag before delivering to
		// this activity.
		mPendingIntent = PendingIntent.getActivity(this, 0,
				new Intent(this, getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);

		// Setup an intent filter for all MIME based dispatches
		IntentFilter ndef = new IntentFilter(NfcAdapter.ACTION_TECH_DISCOVERED);
		try {
			ndef.addDataType("*/*");
		} catch (MalformedMimeTypeException e) {
			throw new RuntimeException("fail", e);
		}
		/*
        mFilters = new IntentFilter[] {
                ndef,
        };
		 */
		mFilters=null;
		// Setup a tech list for all NfcF tags
		//mTechLists = new String[][] { new String[] { NfcF.class.getName() } };
		mTechLists=null;
		//mAdapter.enableForegroundDispatch(this, mPendingIntent, mFilters, mTechLists);                       
	}

	@Override
	public void onResume() {
		super.onResume();
		if (mAdapter!=null)
			mAdapter.enableForegroundDispatch(this, mPendingIntent, mFilters, mTechLists);
	}

	@Override
	public void onNewIntent(Intent intent) {
		Log.e("Foreground dispatch", "Discovered tag with intent: " + intent);
		//get the tag ID from intent
		byte[] tagId = intent.getByteArrayExtra(NfcAdapter.EXTRA_ID); 

		/*
        try {

        	Log.e("Foreground dispatch", "tag_id=" + getHexString(tagId) );
        } catch(Exception e) {}
		 */

		//for now only get the tagID, not write custom data
		/*
        Parcelable[] rawMsgs = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
        NdefMessage[] msgs;
        if (rawMsgs != null) {
            msgs = new NdefMessage[rawMsgs.length];
            for (int i = 0; i < rawMsgs.length; i++) {
                msgs[i] = (NdefMessage) rawMsgs[i];
            }
        } else {
            // Unknown tag type
            byte[] empty = new byte[] {};
            NdefRecord record = new NdefRecord(NdefRecord.TNF_UNKNOWN, empty, empty, empty);
            NdefMessage msg = new NdefMessage(new NdefRecord[] {record});
            msgs = new NdefMessage[] {msg};
        }

        hexContent=getMessagesContent(msgs);
		 */
		try {
			hexContent=getHexString(tagId);
		} catch(Exception e) {
			e.printStackTrace();
			hexContent="0";
		}
		//return msgs;
	}

	@Override
	public void onPause() {
		super.onPause();
		if (mAdapter!=null)
			mAdapter.disableForegroundDispatch(this);
	}

	String getMessagesContent(NdefMessage[] msgs) {
		ArrayList<String> contentList=new ArrayList();
		if (msgs == null || msgs.length == 0) {        	
			return null;            
		}

		String s="";
		String textEncoding = "UTF-8";
		byte[] p;
		int l;
		for (NdefMessage msg:msgs)
			//s+=msg.toByteArray();
			for (NdefRecord rcd:msg.getRecords()) { 
				p=rcd.toByteArray();//.getPayload();
				try {
					contentList.add(getHexString(p));
				} catch (Exception e) {
					e.printStackTrace();
					return null;
				}        		

			}
		return contentList.get(0);

	}



}

