
package com.sugree.twitter;

import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Display;
import android.view.ViewGroup;
import android.view.Window;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.google.code.linkedinapi.client.oauth.LinkedInAccessToken;
import com.google.code.linkedinapi.client.oauth.LinkedInOAuthService;
import com.google.code.linkedinapi.client.oauth.LinkedInRequestToken;
import com.sugree.twitter.Twitter.DialogListener;
import com.tagabag.MyProgressDialog;
import com.tagabag.R;
import com.tagabag.models.SocialNetworks;

public class LinkedInDialog extends Dialog {
	public static final String TAG = "twitter";

	static final int TW_BLUE = 0xFFC0DEED;
	static final float[] DIMENSIONS_LANDSCAPE = {460, 260};
	static final float[] DIMENSIONS_PORTRAIT = {280, 420};
	static final FrameLayout.LayoutParams FILL = 
			new FrameLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, 
					ViewGroup.LayoutParams.FILL_PARENT);
	static final int MARGIN = 4;
	static final int PADDING = 2;

	private int mIcon;
	private DialogListener mListener;
	private MyProgressDialog mSpinner;
	private WebView mWebView;
	private LinearLayout mContent;
	private TextView mTitle;
	private Handler mHandler;

	public static final String OAUTH_TOKEN="oauth_token";
	public static final String OAUTH_SECRET="oauth_secret";
	public static final String VERIFIER="verifier";
	LinkedInOAuthService mAuthService;
	LinkedInRequestToken mLiToken;

	public LinkedInDialog(Context context, LinkedInOAuthService oAuthService, LinkedInRequestToken liToken,DialogListener listener, int icon) {
		super(context);

		mListener = listener;
		mIcon = icon;
		mHandler = new Handler();
		mLiToken = liToken;
		mAuthService = oAuthService;
		
		setOnCancelListener(new DialogInterface.OnCancelListener() {
			public void onCancel(DialogInterface dialog) {
				if (mListener!=null) {
					mListener.onCancel();
					dismiss();
				}
			}
		});
		
	}
	
	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		mSpinner = new MyProgressDialog(getContext(), getContext().getString(R.string.logging_in));
		
		mContent = new LinearLayout(getContext());
		mContent.setOrientation(LinearLayout.VERTICAL);
		setUpTitle();
		setUpWebView();

		Display display = getWindow().getWindowManager().getDefaultDisplay();
		final float scale = getContext().getResources().getDisplayMetrics().density;
		float[] dimensions = display.getWidth() < display.getHeight() ?
				DIMENSIONS_PORTRAIT : DIMENSIONS_LANDSCAPE;
		addContentView(mContent, new FrameLayout.LayoutParams(
				(int) (dimensions[0] * scale + 0.5f),
				(int) (dimensions[1] * scale + 0.5f)));

		retrieveRequestToken();
	}

	@Override
	public void show() {
		super.show();
		mSpinner.show();
	}

	private void setUpTitle() {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		Drawable icon = getContext().getResources().getDrawable(mIcon);
		mTitle = new TextView(getContext());
		mTitle.setText("Linkedin");
		mTitle.setTextColor(Color.WHITE);
		mTitle.setTypeface(Typeface.DEFAULT_BOLD);
		mTitle.setBackgroundColor(TW_BLUE);
		mTitle.setPadding(MARGIN + PADDING, MARGIN, MARGIN, MARGIN);
		mTitle.setCompoundDrawablePadding(MARGIN + PADDING);
		mTitle.setCompoundDrawablesWithIntrinsicBounds(
				icon, null, null, null);
		mContent.addView(mTitle);
	}

	private void retrieveRequestToken() {
		mSpinner.show();
		new Thread() {
			@Override
			public void run() {            		
				mWebView.loadUrl(mLiToken.getAuthorizationUrl());        		
			}
		}.start();
	}

	private void retrieveAccessToken(final String url) {
		mSpinner.show();
		new Thread() {
			@Override
			public void run() {
				Uri uri = Uri.parse(url);
				String verifier = uri.getQueryParameter("oauth_verifier");
				LinkedInAccessToken accessToken = mAuthService.getOAuthAccessToken(mLiToken, verifier);
				
				final Bundle values = new Bundle();

				values.putString(OAUTH_TOKEN, accessToken.getToken());
				values.putString(OAUTH_SECRET, accessToken.getTokenSecret());
				values.putString(VERIFIER,verifier);
				

				if (mListener!=null)
					mListener.onComplete(values);

				mHandler.post(new Runnable() {
					@Override
					public void run() {
						mSpinner.dismiss();
						LinkedInDialog.this.dismiss();
					}					
				});
			}
		}.start();
	}

	private void setUpWebView() {
		mWebView = new WebView(getContext());
		mWebView.setVerticalScrollBarEnabled(false);
		mWebView.setHorizontalScrollBarEnabled(false);
		mWebView.setWebViewClient(new LinkedInDialog.LinkedInWebViewClient());
		mWebView.getSettings().setJavaScriptEnabled(true);
		
		mWebView.setLayoutParams(FILL);
		mContent.addView(mWebView);
	}

	private class LinkedInWebViewClient extends WebViewClient {

		@Override
		public boolean shouldOverrideUrlLoading(WebView view, String url) {
			Log.d(TAG, "Redirect URL: " + url);
			if (url.startsWith(SocialNetworks.OAUTH_CALLBACK_SCHEME)) {
				retrieveAccessToken(url);
				return true;
			} 
			// launch non-dialog URLs in a full browser
			getContext().startActivity(
					new Intent(Intent.ACTION_VIEW, Uri.parse(url))); 
			return true;
		}

		@Override
		public void onReceivedError(WebView view, int errorCode,
				String description, String failingUrl) {
			super.onReceivedError(view, errorCode, description, failingUrl);
			mListener.onError(
					new DialogError(description, errorCode, failingUrl));
			LinkedInDialog.this.dismiss();
		}

		@Override
		public void onPageStarted(WebView view, String url, Bitmap favicon) {
			Log.d(TAG, "WebView loading URL: " + url);
			super.onPageStarted(view, url, favicon);
			if (mSpinner.isShowing()) {
				mSpinner.dismiss();
			}
			mSpinner.show();
		}

		@Override
		public void onPageFinished(WebView view, String url) {
			super.onPageFinished(view, url);
			String title = mWebView.getTitle();
			if (title != null && title.length() > 0) {
				mTitle.setText(title);
			}
			mSpinner.dismiss();
		}   

	}
}
